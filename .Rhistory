a<=predict(preObj,training)$year
a<=predict(preObj,training)$wage
summary(training)
preObj
a<=predict(preObj,training)$age
a<=predict(preObj,training[,])$age
a
predict(preObj,training)$wage
predict(preObj,training)$age
?gam
summary(Wage)
Wage<-subset(Wage,c(-logwage))
Wage1<-subset(Wage,c(logwage))
Wage1<-subset(Wage,-c(logwage))
Wage1<-subset(Wage,select=c(-logwage))
head(Wage1)
Wage1<-subset(Wage,select=-c(logwage))
head(Wage1)
Wage1<-subset(Wage,select=-c(-logwage))
head(Wage1)
install.packages("quantmod")
libray(quantmod)
library(quantmod)
library(quantmod)
from.dat<-as.Date("11/1/2016", format="%m/%d/%Y")
from.dat
to.dat<-as.Date("11/18/2016", format="%m/%d/%Y")
getSymbols("MU",src="MU",from=from.dat,to=to.dat)
getSymbols("GOOG",src="google",from=from.dat,to=to.dat)
head(GOOG)
GOOG
?getSymbols
getSymbols("GOOG",src="yahoo",from=from.dat,to=to.dat)
GOOG
to.dat<-as.Date("11/19/2016", format="%m/%d/%Y")
getSymbols("GOOG",src="yahoo",from=from.dat,to=to.dat)
GOOG
getSymbols("MU",src="yahoo",from=from.dat,to=to.dat)
MU
?ts
chartSeries(MU,type=c("auto"))
class(MU)
Op(MU)
OHLC(MU)
OHLC(MU)->a
class(a)
a[,1]
a[,2]
as.numeric(a[,2])
chartSeries(MU,type=c("auto"),chartTheme("white"))
chartSeries(MU,type=c("auto"),theme=chartTheme("white"))
chartSeries(MU,type=c("auto"),theme=chartTheme("grey"))
chartSeries(MU,type=c("auto"),theme=chartTheme("blue"))
chartSeries(MU,type=c("auto"),theme=chartTheme("white"))
chartSeries(MU,type=c("auto"),theme=chartTheme("white"),line.type = "l")
chartSeries(MU,type=c("auto"),theme=chartTheme("white"))
chartSeries(MU,type=c("auto"),theme=chartTheme("white"),line.type = "1")
chartSeries(MU,type=c("auto"),theme=chartTheme("white"),line.type = "2")
chartSeries(MU,type=c("bars"),theme=chartTheme("white"),line.type = "2")
shiny::runApp('E:/Learn/JHU/Develop Data Product/test1')
runApp('E:/Learn/JHU/Develop Data Product/test1')
runApp('E:/Learn/JHU/Develop Data Product/test1')
install.packages("miniUI")
library(shiny)
runApp('E:/Learn/JHU/Develop Data Product/test1')
?trees
pairs(trees)
runApp('E:/Learn/JHU/Develop Data Product/test1')
data("trees")
runApp('E:/Learn/JHU/Develop Data Product/test1')
runApp('E:/Learn/JHU/Develop Data Product/test1')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
install.packages("googleVis")
library(googleVis)
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
Fruits
plot(M)
M
plot(M)
install.packages("slidify")
version
install.packages("plotly")
library(plotly)
library(plotly)
library("ggplot2", lib.loc="~/R/win-library/3.3")
install.packages("ggplot2")
library(plotly)
install.packages("scales")
library(plotly)
library(plotly)
head(mtcars)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
plot_ly(data=mtcars,x=wt,y=mpg,mode="markers")
plot_ly(data=mtcars,x=hp,y=mpg,mode="markers")
data("mtcars")
plot_ly(data=mtcars,x=hp,y=mpg,mode="markers")
plot_ly(data=mtcars,x=wt,y=mpg)
plot_ly(data=mtcars,x=~wt,y=mpg)
plot_ly(mtcars,x=~wt,y=~mpg)
plot_ly(mtcars, x = ~mpg, y = ~sqrt(wt))
plot_ly(mtcars, x = ~mpg, y = ~sqrt(wt), mode="markers")
plot_ly(mtcars,x=~hp,y=~mpg,mode="markers")
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.3")
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
version
version
library(plotly)
install.packages("Rcpp")
library(plotly)
install.packages("ggplot2")
library(plotly)
install.packages("colorspace")
library(plotly)
library(plotly)
?airmiles
dim(airmiles)
class(airmiles)
length(airmiles)
airmiles
time(airmiles)
plot_ly(x=time(airmiles),y=airmiles)
plot_ly(x=time(airmiles),y=airmiles,mode="markers")
plot_ly(x=time(airmiles),y=airmiles,mode="markers",type = "scatter")
install.packages("yaml")
library(yaml)
plot_ly(x=time(airmiles),y=airmiles,mode="markers",type = "scatter")
plot_ly(x=time(airmiles),y=airmiles,mode="markers")
plot_ly(x=time(airmiles),y=airmiles,type = "scatter")
plot_ly(x=time(airmiles),y=airmiles)
plot_ly(x=time(airmiles),y=airmiles)
head(EuStockMarkets)
library(tidyr)
library(dplyr)
stocks<-as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4))
head(stocks)
plot_ly(stocks,x=time,y=price,color=index)
plot_ly(stocks,x=stocks$time,y=stocks$price,color=stocks$index)
plot_ly(data=stocks,x=time,y=price,color=index)
plot_ly(data=stocks,x = time,y = price, color = index)
y<-stocks$price
plot_ly(x=y, type="histogram")
?iris
plot_ly(iris,y=Petal.Length,color=Species, type="box")
plot_ly(data=iris,y=Petal.Length,color=Species, type="box")
?plot_ly
plot_ly(data=data.frame(iris),y=Petal.Length,color=Species, type="box")
plot_ly(iris,y=iris$Petal.Length,color=Species, type="box")
plot_ly(iris,y=iris$Petal.Length,color=$iris$Species, type="box")
plot_ly(iris,y=iris$Petal.Length,color=iris$Species, type="box")
t<-matrix(rnorm(100*100),nrow=100)
plot_ly(z=t,type="heatmap")
plot_ly(z=t,type="surface")
t<-matrix(sort(rnorm(100*100)),nrow=100)
plot_ly(z=t,type="surface")
d<-diamonds[sample(nrow(diamonds),1000),]
p<-ggplot(data=d,aes(x=carat,y=price))+
geom_point(aes(text=paste("Clarity:",clarity)),size=4)+
geom_smooth(aes(color=cut,fill=cut))+facet_wrap(~cut())
p<-ggplot(data=d,aes(x=carat,y=price))+
geom_point(aes(text=paste("Clarity:",clarity)),size=4)+
geom_smooth(aes(color=cut,fill=cut))+facet_wrap(~cut)
g
library("ggplot2", lib.loc="~/R/win-library/3.3")
g
install.packages("ggproto")
library(plotly)
library(plotly)
p<-ggplot(data=d,aes(x=carat,y=price))+
geom_point(aes(text=paste("Clarity:",clarity)),size=4)+
geom_smooth(aes(color=cut,fill=cut))+facet_wrap(~cut)
d<-diamonds[sample(nrow(diamonds),1000),]
p<-ggplot(data=d,aes(x=carat,y=price))+
geom_point(aes(text=paste("Clarity:",clarity)),size=4)+
geom_smooth(aes(color=cut,fill=cut))+facet_wrap(~cut)
p
gg<-ggplotly(p)
gg
p
(gg<-ggplotly(p))
gg
install.packages("TTR")
install.packages("PerformanceAnalytics")
library(quantmod)
?getSymbols
?spl
tickers = spl('UUP,EMB,HYG')
tickers<-c("MU","GOOG")
getSymbols.yahoo(tickers, env, return.class = 'xts', index.class = 'Date',
from = "2016-01-01", to = Sys.Date(), ...)
getSymbols.yahoo(tickers, env, return.class = 'xts', index.class = 'Date',from = "2016-01-01", to = Sys.Date())
getSymbols.yahoo(tickers, return.class = 'xts', index.class = 'Date',from = "2016-01-01", to = Sys.Date())
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = "2016-01-01", to = Sys.Date())
head(MU)
head(GOOG)
?as.Date
startDate=as.Date("07/01/2016","%M/%D/%Y")
startDate
startDate=as.Date("07/01/2016","%m/%d/%Y")
startDate
Sys.Date()
lastDate<-Sys.Date()+1
lastDate
getSymbols("APPL", env = parent.frame(), src = "yahoo",auto.assign = getOption('getSymbols.auto.assign',TRUE),from = startDate, to = lastDate)
getSymbols("APPL", src = "yahoo",auto.assign = getOption('getSymbols.auto.assign',TRUE),from = startDate, to = lastDate)
getSymbols("APPL", env = parent.frame(), src = "yahoo",auto.assign = getOption('getSymbols.auto.assign',TRUE),from = startDate, to = lastDate)
getSymbols("HP", src = "yahoo",auto.assign = getOption('getSymbols.auto.assign',TRUE),from = startDate, to = lastDate)
getSymbols("HP", src = "yahoo",auto.assign = getOption('getSymbols.auto.assign',TRUE),from = startDate, to = lastDate,env = parent.frame())
HP
head(HP)
dim(HP)
startDate<-as.Date("11/10/2016","%m/%d/%Y")
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
MU
startDate<-as.Date("11/05/2016","%m/%d/%Y")
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
MU
Op(MU)
time(MU)
Op(MU)[,2]
Op(MU)[2]
startDate<-as.Date("07/05/2016","%m/%d/%Y")
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
nrow(MU)
colnames(MU)
a<-getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
a
a[1]
val(a[1])
a[1]["close"]
a[1]["CLOSE"]
a<-getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'csv', index.class = 'Date',from = startDate, to = lastDate)
MU
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'csv', index.class = 'Date',from = startDate, to = lastDate)
MU
a<-getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
MU
a
tickers<-c("MU")
a<-getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
a
a[1]
a[[1]]
a[[1]][,]
dim(a[[1]])
dim(a[1])
class(a)
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
tickers[1]
data<-MU
class(data)
?SMA
sma20<-SMA(data,n=15)
sma20<-SMA(data[,'Close'],n=15)
head(sma20)
sma15<-SMA(Cl(data),n=15)
head(sma15)
Cl(data)
tail(sma15)
sma15
> bb10 = BBands(data, sd=1.0,n=10)
bb10 = BBands(data, sd=1.0,n=10)
bb10 = BBands(Cl(data), sd=1.0,n=10)
head(bb10,20)
dataDF<-data.frame(data,bb10)
head(dataDF)
plot(dataDF[,1],dataDF[,5])
plot(dataDF[,1],dataDF[,5],type = "l")
head(dataDF[,1])
head(dataDF[,0])
dataDF<-data.frame(date=index(data),coredata(data))
head(dataDF)
a<-as.data.table(data)
a<-as.data.frame.table(data)
a<-fortify(data = )
a<-fortify(data)
head(a)
class(a)
dataDF<-fortify(data)
dataDF<-data.frame(dataDF,bb10)
head(dataDF)
plot(dataDF[,1],dataDF[,5],type = "l")
dataDF<-fortify(data)
colnames(dataDF)<-c("Date","Open","High","Low","Close","Volume","Adjusted")
head(dataDF)
dataDF<-data.frame(dataDF,bb10)
head(dataDF)
class(bb10)
bb10DF<-fortify(bb10)
dataDF<-fortify(data)
colnames(dataDF)<-c("Date","Open","High","Low","Close","Volume","Adjusted")
dataDF<-data.frame(dataDF,bb10)
head(dataDF)
dataDF<-fortify(data)
head(dataDF)
colnames(dataDF)<-c("Date","Open","High","Low","Close","Volume","Adjusted")
bb10DF<-fortify(bb10)
dataDF<-data.frame(dataDF,bb10DF)
head(dataDF)
dataDF<-fortify(data)
bb10DF<-fortify(bb10)
colnames(dataDF)<-c("Date","Open","High","Low","Close","Volume","Adjusted")
dataDF<-data.frame(dataDF,bb10DF[,2:4])
head(dataDF)
dataDF<-fortify(data)
bb10DF<-fortify(bb10)
colnames(dataDF)<-c("Date","Open","High","Low","Close","Volume","Adjusted")
dataDF<-data.frame(dataDF,bb10DF[,2:5])
head(dataDF)
plot(dataDF[,"Date"],dataDF[,"Close"],type = "l")
lines(dataDF$Close, col = ‘red’)
lines(dataDF$Close, col = "red")
plot(dataDF[,"Date"],dataDF[,"Close"],type = "l")
lines(dataDF$Close, col = "red")
lines(dataDF$Date,dataDF$Close, col = "red")
lines(dataDF$Date,dataDF$up, col = "purple")
lines(dataDF$Date,dataDF$dn, col = "brown")
lines(dataDF$Date,dataDF$mavg, col = "blue")
library(quantmod);library(TTR);library(xts)
bbEMA = BBands(data, sd=2.0, n=14, maType=EMA)
bbEMA = BBands(Cl(data), sd=2.0, n=14, maType=EMA)
head(bbEMA,20)
rsi14 = RSI(Cl(data), n=14)
head(rsi14)
head(rsi14,20)
?rsi
?RSI
price<-data[,"Close"]
summary(price)
head(price,20)
head(data)
colnames(data)
colnames(data)<-c("Open","High","Low","Close","Volume","Adjusted")
head(data)
data<-MU
colnames(data)<-c("Open","High","Low","Close","Volume","Adjusted")
sma15<-SMA(Cl(data),n=15)
ema15<-EMA(Cl(data),n=15)
bb10 = BBands(Cl(data), sd=1.0,n=10)
dataDF<-fortify(data)
bb10DF<-fortify(bb10)
dataDF<-data.frame(dataDF,bb10DF[,2:5])
head(dataDF)
colnames(dataDF[,1])<-"Date"
colnames(dataDF)
dataDF<-fortify(data)
colnames(dataDF)[1]<-"Date"
head(dataDF)
bb10DF<-fortify(bb10)
dataDF<-data.frame(dataDF,bb10DF[,2:5])
head(dataDF)
plot(dataDF[,"Date"],dataDF[,"Close"],type = "l")
lines(dataDF$Date,dataDF$Close, col = "red")
lines(dataDF$Date,dataDF$up, col = "purple")
lines(dataDF$Date,dataDF$dn, col = "brown")
lines(dataDF$Date,dataDF$mavg, col = "blue")
rsi14 = RSI(Cl(data), n=14)
?RSI
macd = MACD(Cl(data), nFast=12, nSlow=26, nSig=9, maType=SMA)
plot(dataDF[,"Date"],rsi14,type = "l")
abline(h=c(20,80))
plot(dataDF[,"Date"],rsi14,type = "l",xlim=(0,100))
plot(dataDF[,"Date"],rsi14,type = "l",xlim=c(0,100))
plot(dataDF[,"Date"],rsi14,type = "l",ylim=c(0,100))
abline(h=c(20,80))
abline(h=c(20,80),col="red")
plot(dataDF[,"Date"],macd,type = "l")
macd = MACD(Cl(data), nFast=12, nSlow=26, nSig=9, maType=SMA)
plot(dataDF[,"Date"],macd,type = "l")
length(macd)
nrow(data)
head(macd,20)
head(macd,50)
class(macd)
plot(dataDF[,"Date"],macd$macd,type = "l")
a<-"MU"
a
eval(parse(text = "a"))
a<-c("MU","HP")
as.name(a[1])
b<-as.name(a[1])
b
b<-as.symbol(a[1])
b
a
get(a[1])
data<-get(tickers[1])
head(data)
chartSeries(data)
chartSeries(data,theme='white')
chartSeries(data,theme='white',TA="addVo();addBBands();addCCI()")
chartSeries(data,theme='white',TA="addVo();addBBands();addCCI();addRSI()")
rsi14
p<-chartSeries(data,theme='white',TA="addVo();addBBands();addCCI();addRSI()")
ggplotly(p)
chartSeries(data,theme='white',TA="addVo();addBBands();addCCI();addRSI()",subset='2016-11::2016-12')
chartSeries(data,theme='white',TA="addVo();addBBands();addCCI();addRSI()")
addSMI()
?device
?Devices
dev.cur()
library(datasets)
with(faithful,ploteruptions,waiting)
with(faithful,plot(eruptions,waiting))
workDir<-"E:/Learn/R/Proj"
setwd(workDir)
library(datasets)
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting,main="plot1"))
with(faithful,plot(eruptions,waiting,main="plot2"))
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
rm(list=ls())
library(quantmod);library(TTR);library(xts)
library(ggplot2)
lastDate<-Sys.Date()+ 1
startDate<- Sys.Date()-180
getSymbols.yahoo("MU", env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
MU
chartSeries(MU)
chartSeries(MU,theme='white',TA="addVo();addBBands();addCCI();addRSI()")
t<-c(4,5,6)
for i in 1:length(t){}
t<-c(4,5,6)
for i in 1:length(t){
print(i)
}
t<-c(4,5,6)
for i in (1:length(t)){
print(i)
}
t<-c(4,5,6)
for (i in 1:length(t)){
print(i)
}
getSymbols.yahoo("MU", env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
pdf(file="myplot.pdf")
chartSeries(MU,theme='white',TA="addVo();addBBands();addRSI()")
dev.off()
findPeaks(sin(1:10))
plot(1:10,sin(1:10))
sin(seq(1,10,.1))[p]
p <- findPeaks(sin(seq(1,10,.1)))
p
sin(seq(1,10,.1))[p]
plot(seq(1,10,.1),sin(seq(1,10,.1)))
max(sin(seq(1,10,.1)))
x<-sin(seq(1,10,.1))
x<-seq(1,10,.1)
y<-sin(seq(1,10,.1))-x
plot(x,y)
y<-sin(seq(1,10,.1))-x/3
plot(x,y)
findPeaks(y)
y[61:70]
x[60:67]
x<-sin(seq(0,10,.1))
y<-sin(seq(1,10,.1))-x/3
x<-seq(0,10,.1)
y<-sin(x)-x/3
plot(x,y)
findPeaks(y)
plotPDFCharts<-function(tickers){
lastDate<-Sys.Date()+ 1
startDate<- Sys.Date()-180
pdf(file="myRSIplot.pdf")
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
for (i in 1:length(tickers)){
chartSeries(tickers[i],theme='white',TA="addVo();addBBands();addRSI()")
}
dev.off()
return(NULL)
}
tickers<-c("MU","GOOG","AAPL")
plotPDFCharts(tickers)
plotPDFCharts<-function(tickers){
lastDate<-Sys.Date()+ 1
startDate<- Sys.Date()-180
pdf(file="myRSIplot.pdf")
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
for (i in 1:length(tickers)){
chartSeries(get(tickers[i]),theme='white',TA="addVo();addBBands();addRSI()")
}
dev.off()
return(NULL)
}
plotPDFCharts(tickers)
plotPDFCharts<-function(tickers){
lastDate<-Sys.Date()+ 1
startDate<- Sys.Date()-180
pdf(file="myRSIplot.pdf")
getSymbols.yahoo(tickers, env = parent.frame(),return.class = 'xts', index.class = 'Date',from = startDate, to = lastDate)
for (i in 1:length(tickers)){
chartSeries(get(tickers[i]),theme='white',TA="addVo();addBBands();addRSI()")
}
dev.off()
return(TRUE)
}
